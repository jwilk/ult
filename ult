#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2021-2025 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

'''
look up Unicode character properties
'''

import argparse
import ast
import collections
import ctypes
import fnmatch
import fractions
import functools
import html.entities
import itertools
import re
import signal
import sys
import typing

try:
    import unicodedata2 as udata
except ImportError:
    import unicodedata as udata

try:
    import icu
except ImportError:
    icu = None

int(0_0)  # Python >= 3.6 is required

__doc__ = (__doc__ or '').strip()

prog = argparse.ArgumentParser().prog

__version__ = '0'  # not released yet

def trim_version(s):
    return re.sub(r'([.]\d+)[.]0\Z', r'\1', s)

class VersionAction(argparse.Action):
    '''
    argparse --version action
    '''

    def __init__(self, option_strings, dest=argparse.SUPPRESS):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=0,
            help='show version information and exit'
        )

    def __call__(self, parser, namespace, values, option_string=None):
        print(f'{parser.prog} {__version__}')
        print('+ Python {0}.{1}.{2}'.format(*sys.version_info))  # pylint: disable=consider-using-f-string
        unidata_ver = trim_version(udata.unidata_version)
        if udata.__name__ == 'unicodedata2':
            print('+ unicodedata2')
        print(f'  + Unicode {unidata_ver}')
        if icu:
            print(f'+ PyICU {icu.VERSION}')
            print(f'  + Unicode {icu.UNICODE_VERSION}')
            print(f'  + ICU {icu.ICU_VERSION}')
        print('+ LibUniNamesList')
        print(f'  + Unicode {get_unl_version()}')
        aliases_version = get_aliases_version()
        aliases_version = trim_version(aliases_version)
        print(f'+ UCD NameAliases {aliases_version}')
        parser.exit()

def warning(msg):
    print(f'{prog}: {msg}', file=sys.stderr)

def error(msg):
    print(f'{prog}: {msg}', file=sys.stderr)
    sys.exit(1)

get_mnemonic = {  # generated by private/gen-mnemonic-data
    '\x00': 'NU',
    '\x01': 'SH',
    '\x02': 'SX',
    '\x03': 'EX',
    '\x04': 'ET',
    '\x05': 'EQ',
    '\x06': 'AK',
    '\x07': 'BL',
    '\x08': 'BS',
    '\x09': 'HT',
    '\x0A': 'LF',
    '\x0B': 'VT',
    '\x0C': 'FF',
    '\x0D': 'CR',
    '\x0E': 'SO',
    '\x0F': 'SI',
    '\x10': 'DL',
    '\x11': 'D1',
    '\x12': 'D2',
    '\x13': 'D3',
    '\x14': 'D4',
    '\x15': 'NK',
    '\x16': 'SY',
    '\x17': 'EB',
    '\x18': 'CN',
    '\x19': 'EM',
    '\x1A': 'SB',
    '\x1B': 'EC',
    '\x1C': 'FS',
    '\x1D': 'GS',
    '\x1E': 'RS',
    '\x1F': 'US',
    ' ': 'SP',
    '#': 'Nb',
    '$': 'DO',
    '@': 'At',
    '[': '<(',
    '\\': '//',
    ']': ')>',
    '^': "'>",
    '`': "'!",
    '{': '(!',
    '|': '!!',
    '}': '!)',
    '~': "'?",
    '\x7F': 'DT',
    '\x80': 'PA',
    '\x81': 'HO',
    '\x82': 'BH',
    '\x83': 'NH',
    '\x84': 'IN',
    '\x85': 'NL',
    '\x86': 'SA',
    '\x87': 'ES',
    '\x88': 'HS',
    '\x89': 'HJ',
    '\x8A': 'VS',
    '\x8B': 'PD',
    '\x8C': 'PU',
    '\x8D': 'RI',
    '\x8E': 'S2',
    '\x8F': 'S3',
    '\x90': 'DC',
    '\x91': 'P1',
    '\x92': 'P2',
    '\x93': 'TS',
    '\x94': 'CC',
    '\x95': 'MW',
    '\x96': 'SG',
    '\x97': 'EG',
    '\x98': 'SS',
    '\x99': 'GC',
    '\x9A': 'SC',
    '\x9B': 'CI',
    '\x9C': 'ST',
    '\x9D': 'OC',
    '\x9E': 'PM',
    '\x9F': 'AC',
    '\xA0': 'NS',
    '\xA1': '!I',
    '\xA2': 'Ct',
    '\xA3': 'Pd',
    '\xA4': 'Cu',
    '\xA5': 'Ye',
    '\xA6': 'BB',
    '\xA7': 'SE',
    '\xA8': "':",
    '\xA9': 'Co',
    '\xAA': '-a',
    '\xAB': '<<',
    '\xAC': 'NO',
    '\xAD': '--',
    '\xAE': 'Rg',
    '\xAF': "'m",
    '\xB0': 'DG',
    '\xB1': '+-',
    '\xB2': '2S',
    '\xB3': '3S',
    '\xB4': "''",
    '\xB5': 'My',
    '\xB6': 'PI',
    '\xB7': '.M',
    '\xB8': "',",
    '\xB9': '1S',
    '\xBA': '-o',
    '\xBB': '>>',
    '\xBC': '14',
    '\xBD': '12',
    '\xBE': '34',
    '\xBF': '?I',
    '\xC0': 'A!',
    '\xC1': "A'",
    '\xC2': 'A>',
    '\xC3': 'A?',
    '\xC4': 'A:',
    '\xC5': 'AA',
    '\xC6': 'AE',
    '\xC7': 'C,',
    '\xC8': 'E!',
    '\xC9': "E'",
    '\xCA': 'E>',
    '\xCB': 'E:',
    '\xCC': 'I!',
    '\xCD': "I'",
    '\xCE': 'I>',
    '\xCF': 'I:',
    '\xD0': 'D-',
    '\xD1': 'N?',
    '\xD2': 'O!',
    '\xD3': "O'",
    '\xD4': 'O>',
    '\xD5': 'O?',
    '\xD6': 'O:',
    '\xD7': '*X',
    '\xD8': 'O/',
    '\xD9': 'U!',
    '\xDA': "U'",
    '\xDB': 'U>',
    '\xDC': 'U:',
    '\xDD': "Y'",
    '\xDE': 'TH',
    '\xDF': 'ss',
    '\xE0': 'a!',
    '\xE1': "a'",
    '\xE2': 'a>',
    '\xE3': 'a?',
    '\xE4': 'a:',
    '\xE5': 'aa',
    '\xE6': 'ae',
    '\xE7': 'c,',
    '\xE8': 'e!',
    '\xE9': "e'",
    '\xEA': 'e>',
    '\xEB': 'e:',
    '\xEC': 'i!',
    '\xED': "i'",
    '\xEE': 'i>',
    '\xEF': 'i:',
    '\xF0': 'd-',
    '\xF1': 'n?',
    '\xF2': 'o!',
    '\xF3': "o'",
    '\xF4': 'o>',
    '\xF5': 'o?',
    '\xF6': 'o:',
    '\xF7': '-:',
    '\xF8': 'o/',
    '\xF9': 'u!',
    '\xFA': "u'",
    '\xFB': 'u>',
    '\xFC': 'u:',
    '\xFD': "y'",
    '\xFE': 'th',
    '\xFF': 'y:',
    '\u0100': 'A-',
    '\u0101': 'a-',
    '\u0102': 'A(',
    '\u0103': 'a(',
    '\u0104': 'A;',
    '\u0105': 'a;',
    '\u0106': "C'",
    '\u0107': "c'",
    '\u0108': 'C>',
    '\u0109': 'c>',
    '\u010A': 'C.',
    '\u010B': 'c.',
    '\u010C': 'C<',
    '\u010D': 'c<',
    '\u010E': 'D<',
    '\u010F': 'd<',
    '\u0110': 'D/',
    '\u0111': 'd/',
    '\u0112': 'E-',
    '\u0113': 'e-',
    '\u0114': 'E(',
    '\u0115': 'e(',
    '\u0116': 'E.',
    '\u0117': 'e.',
    '\u0118': 'E;',
    '\u0119': 'e;',
    '\u011A': 'E<',
    '\u011B': 'e<',
    '\u011C': 'G>',
    '\u011D': 'g>',
    '\u011E': 'G(',
    '\u011F': 'g(',
    '\u0120': 'G.',
    '\u0121': 'g.',
    '\u0122': 'G,',
    '\u0123': 'g,',
    '\u0124': 'H>',
    '\u0125': 'h>',
    '\u0126': 'H/',
    '\u0127': 'h/',
    '\u0128': 'I?',
    '\u0129': 'i?',
    '\u012A': 'I-',
    '\u012B': 'i-',
    '\u012C': 'I(',
    '\u012D': 'i(',
    '\u012E': 'I;',
    '\u012F': 'i;',
    '\u0130': 'I.',
    '\u0131': 'i.',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0134': 'J>',
    '\u0135': 'j>',
    '\u0136': 'K,',
    '\u0137': 'k,',
    '\u0138': 'kk',
    '\u0139': "L'",
    '\u013A': "l'",
    '\u013B': 'L,',
    '\u013C': 'l,',
    '\u013D': 'L<',
    '\u013E': 'l<',
    '\u013F': 'L.',
    '\u0140': 'l.',
    '\u0141': 'L/',
    '\u0142': 'l/',
    '\u0143': "N'",
    '\u0144': "n'",
    '\u0145': 'N,',
    '\u0146': 'n,',
    '\u0147': 'N<',
    '\u0148': 'n<',
    '\u0149': "'n",
    '\u014A': 'NG',
    '\u014B': 'ng',
    '\u014C': 'O-',
    '\u014D': 'o-',
    '\u014E': 'O(',
    '\u014F': 'o(',
    '\u0150': 'O"',
    '\u0151': 'o"',
    '\u0152': 'OE',
    '\u0153': 'oe',
    '\u0154': "R'",
    '\u0155': "r'",
    '\u0156': 'R,',
    '\u0157': 'r,',
    '\u0158': 'R<',
    '\u0159': 'r<',
    '\u015A': "S'",
    '\u015B': "s'",
    '\u015C': 'S>',
    '\u015D': 's>',
    '\u015E': 'S,',
    '\u015F': 's,',
    '\u0160': 'S<',
    '\u0161': 's<',
    '\u0162': 'T,',
    '\u0163': 't,',
    '\u0164': 'T<',
    '\u0165': 't<',
    '\u0166': 'T/',
    '\u0167': 't/',
    '\u0168': 'U?',
    '\u0169': 'u?',
    '\u016A': 'U-',
    '\u016B': 'u-',
    '\u016C': 'U(',
    '\u016D': 'u(',
    '\u016E': 'U0',
    '\u016F': 'u0',
    '\u0170': 'U"',
    '\u0171': 'u"',
    '\u0172': 'U;',
    '\u0173': 'u;',
    '\u0174': 'W>',
    '\u0175': 'w>',
    '\u0176': 'Y>',
    '\u0177': 'y>',
    '\u0178': 'Y:',
    '\u0179': "Z'",
    '\u017A': "z'",
    '\u017B': 'Z.',
    '\u017C': 'z.',
    '\u017D': 'Z<',
    '\u017E': 'z<',
    '\u01A0': 'O9',
    '\u01A1': 'o9',
    '\u01A2': 'OI',
    '\u01A3': 'oi',
    '\u01A6': 'yr',
    '\u01AF': 'U9',
    '\u01B0': 'u9',
    '\u01B5': 'Z/',
    '\u01B6': 'z/',
    '\u01B7': 'ED',
    '\u01CD': 'A<',
    '\u01CE': 'a<',
    '\u01CF': 'I<',
    '\u01D0': 'i<',
    '\u01D1': 'O<',
    '\u01D2': 'o<',
    '\u01D3': 'U<',
    '\u01D4': 'u<',
    '\u01D5': 'U:-',
    '\u01D6': 'u:-',
    '\u01D7': "U:'",
    '\u01D8': "u:'",
    '\u01D9': 'U:<',
    '\u01DA': 'u:<',
    '\u01DB': 'U:!',
    '\u01DC': 'u:!',
    '\u01DE': 'A1',
    '\u01DF': 'a1',
    '\u01E0': 'A7',
    '\u01E1': 'a7',
    '\u01E2': 'A3',
    '\u01E3': 'a3',
    '\u01E4': 'G/',
    '\u01E5': 'g/',
    '\u01E6': 'G<',
    '\u01E7': 'g<',
    '\u01E8': 'K<',
    '\u01E9': 'k<',
    '\u01EA': 'O;',
    '\u01EB': 'o;',
    '\u01EC': 'O1',
    '\u01ED': 'o1',
    '\u01EE': 'EZ',
    '\u01EF': 'ez',
    '\u01F0': 'j<',
    '\u01F4': "G'",
    '\u01F5': "g'",
    '\u01FA': "AA'",
    '\u01FB': "aa'",
    '\u01FC': "AE'",
    '\u01FD': "ae'",
    '\u01FE': "O/'",
    '\u01FF': "o/'",
    '\u02BF': ';S',
    '\u02C7': "'<",
    '\u02D8': "'(",
    '\u02D9': "'.",
    '\u02DA': "'0",
    '\u02DB': "';",
    '\u02DD': '\'"',
    '\u0386': 'A%',
    '\u0388': 'E%',
    '\u0389': 'Y%',
    '\u038A': 'I%',
    '\u038C': 'O%',
    '\u038E': 'U%',
    '\u038F': 'W%',
    '\u0390': 'i3',
    '\u0391': 'A*',
    '\u0392': 'B*',
    '\u0393': 'G*',
    '\u0394': 'D*',
    '\u0395': 'E*',
    '\u0396': 'Z*',
    '\u0397': 'Y*',
    '\u0398': 'H*',
    '\u0399': 'I*',
    '\u039A': 'K*',
    '\u039B': 'L*',
    '\u039C': 'M*',
    '\u039D': 'N*',
    '\u039E': 'C*',
    '\u039F': 'O*',
    '\u03A0': 'P*',
    '\u03A1': 'R*',
    '\u03A3': 'S*',
    '\u03A4': 'T*',
    '\u03A5': 'U*',
    '\u03A6': 'F*',
    '\u03A7': 'X*',
    '\u03A8': 'Q*',
    '\u03A9': 'W*',
    '\u03AA': 'J*',
    '\u03AB': 'V*',
    '\u03AC': 'a%',
    '\u03AD': 'e%',
    '\u03AE': 'y%',
    '\u03AF': 'i%',
    '\u03B0': 'u3',
    '\u03B1': 'a*',
    '\u03B2': 'b*',
    '\u03B3': 'g*',
    '\u03B4': 'd*',
    '\u03B5': 'e*',
    '\u03B6': 'z*',
    '\u03B7': 'y*',
    '\u03B8': 'h*',
    '\u03B9': 'i*',
    '\u03BA': 'k*',
    '\u03BB': 'l*',
    '\u03BC': 'm*',
    '\u03BD': 'n*',
    '\u03BE': 'c*',
    '\u03BF': 'o*',
    '\u03C0': 'p*',
    '\u03C1': 'r*',
    '\u03C2': '*s',
    '\u03C3': 's*',
    '\u03C4': 't*',
    '\u03C5': 'u*',
    '\u03C6': 'f*',
    '\u03C7': 'x*',
    '\u03C8': 'q*',
    '\u03C9': 'w*',
    '\u03CA': 'j*',
    '\u03CB': 'v*',
    '\u03CC': 'o%',
    '\u03CD': 'u%',
    '\u03CE': 'w%',
    '\u03D8': "'G",
    '\u03D9': ',G',
    '\u03DA': 'T3',
    '\u03DB': 't3',
    '\u03DC': 'M3',
    '\u03DD': 'm3',
    '\u03DE': 'K3',
    '\u03DF': 'k3',
    '\u03E0': 'P3',
    '\u03E1': 'p3',
    '\u03F4': "'%",
    '\u03F5': 'j3',
    '\u0401': 'IO',
    '\u0402': 'D%',
    '\u0403': 'G%',
    '\u0404': 'IE',
    '\u0405': 'DS',
    '\u0406': 'II',
    '\u0407': 'YI',
    '\u0408': 'J%',
    '\u0409': 'LJ',
    '\u040A': 'NJ',
    '\u040B': 'Ts',
    '\u040C': 'KJ',
    '\u040E': 'V%',
    '\u040F': 'DZ',
    '\u0410': 'A=',
    '\u0411': 'B=',
    '\u0412': 'V=',
    '\u0413': 'G=',
    '\u0414': 'D=',
    '\u0415': 'E=',
    '\u0416': 'Z%',
    '\u0417': 'Z=',
    '\u0418': 'I=',
    '\u0419': 'J=',
    '\u041A': 'K=',
    '\u041B': 'L=',
    '\u041C': 'M=',
    '\u041D': 'N=',
    '\u041E': 'O=',
    '\u041F': 'P=',
    '\u0420': 'R=',
    '\u0421': 'S=',
    '\u0422': 'T=',
    '\u0423': 'U=',
    '\u0424': 'F=',
    '\u0425': 'H=',
    '\u0426': 'C=',
    '\u0427': 'C%',
    '\u0428': 'S%',
    '\u0429': 'Sc',
    '\u042A': '="',
    '\u042B': 'Y=',
    '\u042C': '%"',
    '\u042D': 'JE',
    '\u042E': 'JU',
    '\u042F': 'JA',
    '\u0430': 'a=',
    '\u0431': 'b=',
    '\u0432': 'v=',
    '\u0433': 'g=',
    '\u0434': 'd=',
    '\u0435': 'e=',
    '\u0436': 'z%',
    '\u0437': 'z=',
    '\u0438': 'i=',
    '\u0439': 'j=',
    '\u043A': 'k=',
    '\u043B': 'l=',
    '\u043C': 'm=',
    '\u043D': 'n=',
    '\u043E': 'o=',
    '\u043F': 'p=',
    '\u0440': 'r=',
    '\u0441': 's=',
    '\u0442': 't=',
    '\u0443': 'u=',
    '\u0444': 'f=',
    '\u0445': 'h=',
    '\u0446': 'c=',
    '\u0447': 'c%',
    '\u0448': 's%',
    '\u0449': 'sc',
    '\u044A': "='",
    '\u044B': 'y=',
    '\u044C': "%'",
    '\u044D': 'je',
    '\u044E': 'ju',
    '\u044F': 'ja',
    '\u0451': 'io',
    '\u0452': 'd%',
    '\u0453': 'g%',
    '\u0454': 'ie',
    '\u0455': 'ds',
    '\u0456': 'ii',
    '\u0457': 'yi',
    '\u0458': 'j%',
    '\u0459': 'lj',
    '\u045A': 'nj',
    '\u045B': 'ts',
    '\u045C': 'kj',
    '\u045E': 'v%',
    '\u045F': 'dz',
    '\u0462': 'Y3',
    '\u0463': 'y3',
    '\u046A': 'O3',
    '\u046B': 'o3',
    '\u0472': 'F3',
    '\u0473': 'f3',
    '\u0474': 'V3',
    '\u0475': 'v3',
    '\u0480': 'C3',
    '\u0481': 'c3',
    '\u0490': 'G3',
    '\u0491': 'g3',
    '\u05D0': 'A+',
    '\u05D1': 'B+',
    '\u05D2': 'G+',
    '\u05D3': 'D+',
    '\u05D4': 'H+',
    '\u05D5': 'W+',
    '\u05D6': 'Z+',
    '\u05D7': 'X+',
    '\u05D8': 'Tj',
    '\u05D9': 'J+',
    '\u05DA': 'K%',
    '\u05DB': 'K+',
    '\u05DC': 'L+',
    '\u05DD': 'M%',
    '\u05DE': 'M+',
    '\u05DF': 'N%',
    '\u05E0': 'N+',
    '\u05E1': 'S+',
    '\u05E2': 'E+',
    '\u05E3': 'P%',
    '\u05E4': 'P+',
    '\u05E5': 'Zj',
    '\u05E6': 'ZJ',
    '\u05E7': 'Q+',
    '\u05E8': 'R+',
    '\u05E9': 'Sh',
    '\u05EA': 'T+',
    '\u060C': ',+',
    '\u061B': ';+',
    '\u061F': '?+',
    '\u0621': "H'",
    '\u0622': 'aM',
    '\u0623': 'aH',
    '\u0624': 'wH',
    '\u0625': 'ah',
    '\u0626': 'yH',
    '\u0627': 'a+',
    '\u0628': 'b+',
    '\u0629': 'tm',
    '\u062A': 't+',
    '\u062B': 'tk',
    '\u062C': 'g+',
    '\u062D': 'hk',
    '\u062E': 'x+',
    '\u062F': 'd+',
    '\u0630': 'dk',
    '\u0631': 'r+',
    '\u0632': 'z+',
    '\u0633': 's+',
    '\u0634': 'sn',
    '\u0635': 'c+',
    '\u0636': 'dd',
    '\u0637': 'tj',
    '\u0638': 'zH',
    '\u0639': 'e+',
    '\u063A': 'i+',
    '\u0640': '++',
    '\u0641': 'f+',
    '\u0642': 'q+',
    '\u0643': 'k+',
    '\u0644': 'l+',
    '\u0645': 'm+',
    '\u0646': 'n+',
    '\u0647': 'h+',
    '\u0648': 'w+',
    '\u0649': 'j+',
    '\u064A': 'y+',
    '\u064B': ':+',
    '\u064C': '"+',
    '\u064D': '=+',
    '\u064E': '/+',
    '\u064F': "'+",
    '\u0650': '1+',
    '\u0651': '3+',
    '\u0652': '0+',
    '\u0670': 'aS',
    '\u067E': 'p+',
    '\u06A4': 'v+',
    '\u06AF': 'gf',
    '\u06F0': '0a',
    '\u06F1': '1a',
    '\u06F2': '2a',
    '\u06F3': '3a',
    '\u06F4': '4a',
    '\u06F5': '5a',
    '\u06F6': '6a',
    '\u06F7': '7a',
    '\u06F8': '8a',
    '\u06F9': '9a',
    '\u1E00': 'A-0',
    '\u1E01': 'a-0',
    '\u1E02': 'B.',
    '\u1E03': 'b.',
    '\u1E04': 'B-.',
    '\u1E05': 'b-.',
    '\u1E06': 'B_',
    '\u1E07': 'b_',
    '\u1E08': "C,'",
    '\u1E09': "c,'",
    '\u1E0A': 'D.',
    '\u1E0B': 'd.',
    '\u1E0C': 'D-.',
    '\u1E0D': 'd-.',
    '\u1E0E': 'D_',
    '\u1E0F': 'd_',
    '\u1E10': 'D,',
    '\u1E11': 'd,',
    '\u1E12': 'D->',
    '\u1E13': 'd->',
    '\u1E14': 'E-!',
    '\u1E15': 'e-!',
    '\u1E16': "E-'",
    '\u1E17': "e-'",
    '\u1E18': 'E->',
    '\u1E19': 'e->',
    '\u1E1A': 'E-?',
    '\u1E1B': 'e-?',
    '\u1E1C': 'E,(',
    '\u1E1D': 'e,(',
    '\u1E1E': 'F.',
    '\u1E1F': 'f.',
    '\u1E20': 'G-',
    '\u1E21': 'g-',
    '\u1E22': 'H.',
    '\u1E23': 'h.',
    '\u1E24': 'H-.',
    '\u1E25': 'h-.',
    '\u1E26': 'H:',
    '\u1E27': 'h:',
    '\u1E28': 'H,',
    '\u1E29': 'h,',
    '\u1E2A': 'H-(',
    '\u1E2B': 'h-(',
    '\u1E2C': 'I-?',
    '\u1E2D': 'i-?',
    '\u1E2E': "I:'",
    '\u1E2F': "i:'",
    '\u1E30': "K'",
    '\u1E31': "k'",
    '\u1E32': 'K-.',
    '\u1E33': 'k-.',
    '\u1E34': 'K_',
    '\u1E35': 'k_',
    '\u1E36': 'L-.',
    '\u1E37': 'l-.',
    '\u1E38': 'L--.',
    '\u1E39': 'l--.',
    '\u1E3A': 'L_',
    '\u1E3B': 'l_',
    '\u1E3C': 'L->',
    '\u1E3D': 'l->',
    '\u1E3E': "M'",
    '\u1E3F': "m'",
    '\u1E40': 'M.',
    '\u1E41': 'm.',
    '\u1E42': 'M-.',
    '\u1E43': 'm-.',
    '\u1E44': 'N.',
    '\u1E45': 'n.',
    '\u1E46': 'N-.',
    '\u1E47': 'n-.',
    '\u1E48': 'N_',
    '\u1E49': 'n_',
    '\u1E4A': 'N->',
    '\u1E4B': 'n->',
    '\u1E4C': "O?'",
    '\u1E4D': "o?'",
    '\u1E4E': 'O?:',
    '\u1E4F': 'o?:',
    '\u1E50': 'O-!',
    '\u1E51': 'o-!',
    '\u1E52': "O-'",
    '\u1E53': "o-'",
    '\u1E54': "P'",
    '\u1E55': "p'",
    '\u1E56': 'P.',
    '\u1E57': 'p.',
    '\u1E58': 'R.',
    '\u1E59': 'r.',
    '\u1E5A': 'R-.',
    '\u1E5B': 'r-.',
    '\u1E5C': 'R--.',
    '\u1E5D': 'r--.',
    '\u1E5E': 'R_',
    '\u1E5F': 'r_',
    '\u1E60': 'S.',
    '\u1E61': 's.',
    '\u1E62': 'S-.',
    '\u1E63': 's-.',
    '\u1E64': "S'.",
    '\u1E65': "s'.",
    '\u1E66': 'S<.',
    '\u1E67': 's<.',
    '\u1E68': 'S.-.',
    '\u1E69': 's.-.',
    '\u1E6A': 'T.',
    '\u1E6B': 't.',
    '\u1E6C': 'T-.',
    '\u1E6D': 't-.',
    '\u1E6E': 'T_',
    '\u1E6F': 't_',
    '\u1E70': 'T->',
    '\u1E71': 't->',
    '\u1E72': 'U--:',
    '\u1E73': 'u--:',
    '\u1E74': 'U-?',
    '\u1E75': 'u-?',
    '\u1E76': 'U->',
    '\u1E77': 'u->',
    '\u1E78': "U?'",
    '\u1E79': "u?'",
    '\u1E7A': 'U-:',
    '\u1E7B': 'u-:',
    '\u1E7C': 'V?',
    '\u1E7D': 'v?',
    '\u1E7E': 'V-.',
    '\u1E7F': 'v-.',
    '\u1E80': 'W!',
    '\u1E81': 'w!',
    '\u1E82': "W'",
    '\u1E83': "w'",
    '\u1E84': 'W:',
    '\u1E85': 'w:',
    '\u1E86': 'W.',
    '\u1E87': 'w.',
    '\u1E88': 'W-.',
    '\u1E89': 'w-.',
    '\u1E8A': 'X.',
    '\u1E8B': 'x.',
    '\u1E8C': 'X:',
    '\u1E8D': 'x:',
    '\u1E8E': 'Y.',
    '\u1E8F': 'y.',
    '\u1E90': 'Z>',
    '\u1E91': 'z>',
    '\u1E92': 'Z-.',
    '\u1E93': 'z-.',
    '\u1E94': 'Z_',
    '\u1E95': 'z_',
    '\u1E96': 'h_',
    '\u1E97': 't:',
    '\u1E98': 'w0',
    '\u1E99': 'y0',
    '\u1EA0': 'A-.',
    '\u1EA1': 'a-.',
    '\u1EA2': 'A2',
    '\u1EA3': 'a2',
    '\u1EA4': "A>'",
    '\u1EA5': "a>'",
    '\u1EA6': 'A>!',
    '\u1EA7': 'a>!',
    '\u1EA8': 'A>2',
    '\u1EA9': 'a>2',
    '\u1EAA': 'A>?',
    '\u1EAB': 'a>?',
    '\u1EAC': 'A>-.',
    '\u1EAD': 'a>-.',
    '\u1EAE': "A('",
    '\u1EAF': "a('",
    '\u1EB0': 'A(!',
    '\u1EB1': 'a(!',
    '\u1EB2': 'A(2',
    '\u1EB3': 'a(2',
    '\u1EB4': 'A(?',
    '\u1EB5': 'a(?',
    '\u1EB6': 'A(-.',
    '\u1EB7': 'a(-.',
    '\u1EB8': 'E-.',
    '\u1EB9': 'e-.',
    '\u1EBA': 'E2',
    '\u1EBB': 'e2',
    '\u1EBC': 'E?',
    '\u1EBD': 'e?',
    '\u1EBE': "E>'",
    '\u1EBF': "e>'",
    '\u1EC0': 'E>!',
    '\u1EC1': 'e>!',
    '\u1EC2': 'E>2',
    '\u1EC3': 'e>2',
    '\u1EC4': 'E>?',
    '\u1EC5': 'e>?',
    '\u1EC6': 'E>-.',
    '\u1EC7': 'e>-.',
    '\u1EC8': 'I2',
    '\u1EC9': 'i2',
    '\u1ECA': 'I-.',
    '\u1ECB': 'i-.',
    '\u1ECC': 'O-.',
    '\u1ECD': 'o-.',
    '\u1ECE': 'O2',
    '\u1ECF': 'o2',
    '\u1ED0': "O>'",
    '\u1ED1': "o>'",
    '\u1ED2': 'O>!',
    '\u1ED3': 'o>!',
    '\u1ED4': 'O>2',
    '\u1ED5': 'o>2',
    '\u1ED6': 'O>?',
    '\u1ED7': 'o>?',
    '\u1ED8': 'O>-.',
    '\u1ED9': 'o>-.',
    '\u1EDA': "O9'",
    '\u1EDB': "o9'",
    '\u1EDC': 'O9!',
    '\u1EDD': 'o9!',
    '\u1EDE': 'O92',
    '\u1EDF': 'o92',
    '\u1EE0': 'O9?',
    '\u1EE1': 'o9?',
    '\u1EE2': 'O9-.',
    '\u1EE3': 'o9-.',
    '\u1EE4': 'U-.',
    '\u1EE5': 'u-.',
    '\u1EE6': 'U2',
    '\u1EE7': 'u2',
    '\u1EE8': "U9'",
    '\u1EE9': "u9'",
    '\u1EEA': 'U9!',
    '\u1EEB': 'u9!',
    '\u1EEC': 'U92',
    '\u1EED': 'u92',
    '\u1EEE': 'U9?',
    '\u1EEF': 'u9?',
    '\u1EF0': 'U9-.',
    '\u1EF1': 'u9-.',
    '\u1EF2': 'Y!',
    '\u1EF3': 'y!',
    '\u1EF4': 'Y-.',
    '\u1EF5': 'y-.',
    '\u1EF6': 'Y2',
    '\u1EF7': 'y2',
    '\u1EF8': 'Y?',
    '\u1EF9': 'y?',
    '\u1F00': ";'",
    '\u1F01': ",'",
    '\u1F02': ';!',
    '\u1F03': ',!',
    '\u1F04': '?;',
    '\u1F05': '?,',
    '\u1F06': '!:',
    '\u1F07': '?:',
    '\u2002': '1N',
    '\u2003': '1M',
    '\u2004': '3M',
    '\u2005': '4M',
    '\u2006': '6M',
    '\u2009': '1T',
    '\u200A': '1H',
    '\u2010': '-1',
    '\u2013': '-N',
    '\u2014': '-M',
    '\u2015': '-3',
    '\u2016': '!2',
    '\u2017': '=2',
    '\u2018': "'6",
    '\u2019': "'9",
    '\u201A': '.9',
    '\u201B': "9'",
    '\u201C': '"6',
    '\u201D': '"9',
    '\u201E': ':9',
    '\u201F': '9"',
    '\u2020': '/-',
    '\u2021': '/=',
    '\u2025': '..',
    '\u2030': '%0',
    '\u2032': "1'",
    '\u2033': "2'",
    '\u2034': "3'",
    '\u2035': '1"',
    '\u2036': '2"',
    '\u2037': '3"',
    '\u2038': 'Ca',
    '\u2039': '<1',
    '\u203A': '>1',
    '\u203B': ':X',
    '\u203C': '!*2',
    '\u203E': "'-",
    '\u2044': '/f',
    '\u2070': '0S',
    '\u2074': '4S',
    '\u2075': '5S',
    '\u2076': '6S',
    '\u2077': '7S',
    '\u2078': '8S',
    '\u2079': '9S',
    '\u207A': '+S',
    '\u207B': '-S',
    '\u207C': '=S',
    '\u207D': '(S',
    '\u207E': ')S',
    '\u207F': 'nS',
    '\u2080': '0s',
    '\u2081': '1s',
    '\u2082': '2s',
    '\u2083': '3s',
    '\u2084': '4s',
    '\u2085': '5s',
    '\u2086': '6s',
    '\u2087': '7s',
    '\u2088': '8s',
    '\u2089': '9s',
    '\u208A': '+s',
    '\u208B': '-s',
    '\u208C': '=s',
    '\u208D': '(s',
    '\u208E': ')s',
    '\u20A4': 'Li',
    '\u20A7': 'Pt',
    '\u20A9': 'W=',
    '\u2103': 'oC',
    '\u2105': 'co',
    '\u2109': 'oF',
    '\u2116': 'N0',
    '\u2117': 'PO',
    '\u211E': 'Rx',
    '\u2120': 'SM',
    '\u2122': 'TM',
    '\u2126': 'Om',
    '\u212B': 'AO',
    '\u2153': '13',
    '\u2154': '23',
    '\u2155': '15',
    '\u2156': '25',
    '\u2157': '35',
    '\u2158': '45',
    '\u2159': '16',
    '\u215A': '56',
    '\u215B': '18',
    '\u215C': '38',
    '\u215D': '58',
    '\u215E': '78',
    '\u2160': '1R',
    '\u2161': '2R',
    '\u2162': '3R',
    '\u2163': '4R',
    '\u2164': '5R',
    '\u2165': '6R',
    '\u2166': '7R',
    '\u2167': '8R',
    '\u2168': '9R',
    '\u2169': 'aR',
    '\u216A': 'bR',
    '\u216B': 'cR',
    '\u216C': '50R',
    '\u216D': '100R',
    '\u216E': '500R',
    '\u216F': '1000R',
    '\u2170': '1r',
    '\u2171': '2r',
    '\u2172': '3r',
    '\u2173': '4r',
    '\u2174': '5r',
    '\u2175': '6r',
    '\u2176': '7r',
    '\u2177': '8r',
    '\u2178': '9r',
    '\u2179': 'ar',
    '\u217A': 'br',
    '\u217B': 'cr',
    '\u217C': '50r',
    '\u217D': '100r',
    '\u217E': '500r',
    '\u217F': '1000r',
    '\u2180': '1000RCD',
    '\u2181': '5000R',
    '\u2182': '10000R',
    '\u2190': '<-',
    '\u2191': '-!',
    '\u2192': '->',
    '\u2193': '-v',
    '\u2194': '<>',
    '\u2195': 'UD',
    '\u2196': '<!!',
    '\u2197': '//>',
    '\u2198': '!!>',
    '\u2199': '<//',
    '\u21D0': '<=',
    '\u21D2': '=>',
    '\u21D4': '==',
    '\u2200': 'FA',
    '\u2202': 'dP',
    '\u2203': 'TE',
    '\u2205': '/0',
    '\u2206': 'DE',
    '\u2207': 'NB',
    '\u2208': '(-',
    '\u220B': '-)',
    '\u220F': '*P',
    '\u2211': '+Z',
    '\u2212': '-2',
    '\u2213': '-+',
    '\u2217': '*-',
    '\u2218': 'Ob',
    '\u2219': 'Sb',
    '\u221A': 'RT',
    '\u221D': '0(',
    '\u221E': '00',
    '\u221F': '-L',
    '\u2220': '-V',
    '\u2225': 'PP',
    '\u2227': 'AN',
    '\u2228': 'OR',
    '\u2229': '(U',
    '\u222A': ')U',
    '\u222B': 'In',
    '\u222C': 'DI',
    '\u222E': 'Io',
    '\u2234': '.:',
    '\u2235': ':.',
    '\u2236': ':R',
    '\u2237': '::',
    '\u223C': '?1',
    '\u223E': 'CG',
    '\u2243': '?-',
    '\u2245': '?=',
    '\u2248': '?2',
    '\u224C': '=?',
    '\u2253': 'HI',
    '\u2260': '!=',
    '\u2261': '=3',
    '\u2264': '=<',
    '\u2265': '>=',
    '\u226A': '<*',
    '\u226B': '*>',
    '\u226E': '!<',
    '\u226F': '!>',
    '\u2282': '(C',
    '\u2283': ')C',
    '\u2286': '(_',
    '\u2287': ')_',
    '\u2299': '0.',
    '\u229A': '02',
    '\u22A5': '-T',
    '\u22C5': '.P',
    '\u22EE': ':3',
    '\u22EF': '.3',
    '\u2302': 'Eh',
    '\u2308': '<7',
    '\u2309': '>7',
    '\u230A': '7<',
    '\u230B': '7>',
    '\u2310': 'NI',
    '\u2312': '(A',
    '\u2315': 'TR',
    '\u2320': 'Iu',
    '\u2321': 'Il',
    '\u2329': '</',
    '\u232A': '/>',
    '\u2423': 'Vs',
    '\u2440': '1h',
    '\u2441': '3h',
    '\u2442': '2h',
    '\u2443': '4h',
    '\u2446': '1j',
    '\u2447': '2j',
    '\u2448': '3j',
    '\u2449': '4j',
    '\u2460': '1-o',
    '\u2461': '2-o',
    '\u2462': '3-o',
    '\u2463': '4-o',
    '\u2464': '5-o',
    '\u2465': '6-o',
    '\u2466': '7-o',
    '\u2467': '8-o',
    '\u2468': '9-o',
    '\u2469': '10-o',
    '\u246A': '11-o',
    '\u246B': '12-o',
    '\u246C': '13-o',
    '\u246D': '14-o',
    '\u246E': '15-o',
    '\u246F': '16-o',
    '\u2470': '17-o',
    '\u2471': '18-o',
    '\u2472': '19-o',
    '\u2473': '20-o',
    '\u2474': '(1)',
    '\u2475': '(2)',
    '\u2476': '(3)',
    '\u2477': '(4)',
    '\u2478': '(5)',
    '\u2479': '(6)',
    '\u247A': '(7)',
    '\u247B': '(8)',
    '\u247C': '(9)',
    '\u247D': '(10)',
    '\u247E': '(11)',
    '\u247F': '(12)',
    '\u2480': '(13)',
    '\u2481': '(14)',
    '\u2482': '(15)',
    '\u2483': '(16)',
    '\u2484': '(17)',
    '\u2485': '(18)',
    '\u2486': '(19)',
    '\u2487': '(20)',
    '\u2488': '1.',
    '\u2489': '2.',
    '\u248A': '3.',
    '\u248B': '4.',
    '\u248C': '5.',
    '\u248D': '6.',
    '\u248E': '7.',
    '\u248F': '8.',
    '\u2490': '9.',
    '\u2491': '10.',
    '\u2492': '11.',
    '\u2493': '12.',
    '\u2494': '13.',
    '\u2495': '14.',
    '\u2496': '15.',
    '\u2497': '16.',
    '\u2498': '17.',
    '\u2499': '18.',
    '\u249A': '19.',
    '\u249B': '20.',
    '\u249C': '(a)',
    '\u249D': '(b)',
    '\u249E': '(c)',
    '\u249F': '(d)',
    '\u24A0': '(e)',
    '\u24A1': '(f)',
    '\u24A2': '(g)',
    '\u24A3': '(h)',
    '\u24A4': '(i)',
    '\u24A5': '(j)',
    '\u24A6': '(k)',
    '\u24A7': '(l)',
    '\u24A8': '(m)',
    '\u24A9': '(n)',
    '\u24AA': '(o)',
    '\u24AB': '(p)',
    '\u24AC': '(q)',
    '\u24AD': '(r)',
    '\u24AE': '(s)',
    '\u24AF': '(t)',
    '\u24B0': '(u)',
    '\u24B1': '(v)',
    '\u24B2': '(w)',
    '\u24B3': '(x)',
    '\u24B4': '(y)',
    '\u24B5': '(z)',
    '\u24B6': 'A-o',
    '\u24B7': 'B-o',
    '\u24B8': 'C-o',
    '\u24B9': 'D-o',
    '\u24BA': 'E-o',
    '\u24BB': 'F-o',
    '\u24BC': 'G-o',
    '\u24BD': 'H-o',
    '\u24BE': 'I-o',
    '\u24BF': 'J-o',
    '\u24C0': 'K-o',
    '\u24C1': 'L-o',
    '\u24C2': 'M-o',
    '\u24C3': 'N-o',
    '\u24C4': 'O-o',
    '\u24C5': 'P-o',
    '\u24C6': 'Q-o',
    '\u24C7': 'R-o',
    '\u24C8': 'S-o',
    '\u24C9': 'T-o',
    '\u24CA': 'U-o',
    '\u24CB': 'V-o',
    '\u24CC': 'W-o',
    '\u24CD': 'X-o',
    '\u24CE': 'Y-o',
    '\u24CF': 'Z-o',
    '\u24D0': 'a-o',
    '\u24D1': 'b-o',
    '\u24D2': 'c-o',
    '\u24D3': 'd-o',
    '\u24D4': 'e-o',
    '\u24D5': 'f-o',
    '\u24D6': 'g-o',
    '\u24D7': 'h-o',
    '\u24D8': 'i-o',
    '\u24D9': 'j-o',
    '\u24DA': 'k-o',
    '\u24DB': 'l-o',
    '\u24DC': 'm-o',
    '\u24DD': 'n-o',
    '\u24DE': 'o-o',
    '\u24DF': 'p-o',
    '\u24E0': 'q-o',
    '\u24E1': 'r-o',
    '\u24E2': 's-o',
    '\u24E3': 't-o',
    '\u24E4': 'u-o',
    '\u24E5': 'v-o',
    '\u24E6': 'w-o',
    '\u24E7': 'x-o',
    '\u24E8': 'y-o',
    '\u24E9': 'z-o',
    '\u24EA': '0-o',
    '\u2500': 'hh',
    '\u2501': 'HH',
    '\u2502': 'vv',
    '\u2503': 'VV',
    '\u2504': '3-',
    '\u2505': '3_',
    '\u2506': '3!',
    '\u2507': '3/',
    '\u2508': '4-',
    '\u2509': '4_',
    '\u250A': '4!',
    '\u250B': '4/',
    '\u250C': 'dr',
    '\u250D': 'dR',
    '\u250E': 'Dr',
    '\u250F': 'DR',
    '\u2510': 'dl',
    '\u2511': 'dL',
    '\u2512': 'Dl',
    '\u2513': 'LD',
    '\u2514': 'ur',
    '\u2515': 'uR',
    '\u2516': 'Ur',
    '\u2517': 'UR',
    '\u2518': 'ul',
    '\u2519': 'uL',
    '\u251A': 'Ul',
    '\u251B': 'UL',
    '\u251C': 'vr',
    '\u251D': 'vR',
    '\u251E': 'Udr',
    '\u251F': 'uDr',
    '\u2520': 'Vr',
    '\u2521': 'UdR',
    '\u2522': 'uDR',
    '\u2523': 'VR',
    '\u2524': 'vl',
    '\u2525': 'vL',
    '\u2526': 'Udl',
    '\u2527': 'uDl',
    '\u2528': 'Vl',
    '\u2529': 'UdL',
    '\u252A': 'uDL',
    '\u252B': 'VL',
    '\u252C': 'dh',
    '\u252D': 'dLr',
    '\u252E': 'dlR',
    '\u252F': 'dH',
    '\u2530': 'Dh',
    '\u2531': 'DLr',
    '\u2532': 'DlR',
    '\u2533': 'DH',
    '\u2534': 'uh',
    '\u2535': 'uLr',
    '\u2536': 'ulR',
    '\u2537': 'uH',
    '\u2538': 'Uh',
    '\u2539': 'ULr',
    '\u253A': 'UlR',
    '\u253B': 'UH',
    '\u253C': 'vh',
    '\u253D': 'vLr',
    '\u253E': 'vlR',
    '\u253F': 'vH',
    '\u2540': 'Udh',
    '\u2541': 'uDh',
    '\u2542': 'Vh',
    '\u2543': 'UdLr',
    '\u2544': 'UdlR',
    '\u2545': 'uDLr',
    '\u2546': 'uDlR',
    '\u2547': 'UdH',
    '\u2548': 'uDH',
    '\u2549': 'VLr',
    '\u254A': 'VlR',
    '\u254B': 'VH',
    '\u2571': 'FD',
    '\u2572': 'BD',
    '\u2580': 'TB',
    '\u2584': 'LB',
    '\u2588': 'FB',
    '\u258C': 'lB',
    '\u2590': 'RB',
    '\u2591': '.S',
    '\u2592': ':S',
    '\u2593': '?S',
    '\u25A0': 'fS',
    '\u25A1': 'OS',
    '\u25A2': 'RO',
    '\u25A3': 'Rr',
    '\u25A4': 'RF',
    '\u25A5': 'RY',
    '\u25A6': 'RH',
    '\u25A7': 'RZ',
    '\u25A8': 'RK',
    '\u25A9': 'RX',
    '\u25AA': 'sB',
    '\u25AC': 'SR',
    '\u25AD': 'Or',
    '\u25B2': 'UT',
    '\u25B3': 'uT',
    '\u25B6': 'PR',
    '\u25B7': 'Tr',
    '\u25BC': 'Dt',
    '\u25BD': 'dT',
    '\u25C0': 'PL',
    '\u25C1': 'Tl',
    '\u25C6': 'Db',
    '\u25C7': 'Dw',
    '\u25CA': 'LZ',
    '\u25CB': '0m',
    '\u25CE': '0o',
    '\u25CF': '0M',
    '\u25D0': '0L',
    '\u25D1': '0R',
    '\u25D8': 'Sn',
    '\u25D9': 'Ic',
    '\u25E2': 'Fd',
    '\u25E3': 'Bd',
    '\u2605': '*2',
    '\u2606': '*1',
    '\u260E': 'TEL',
    '\u260F': 'tel',
    '\u261C': '<H',
    '\u261E': '>H',
    '\u263A': '0u',
    '\u263B': '0U',
    '\u263C': 'SU',
    '\u2640': 'Fm',
    '\u2642': 'Ml',
    '\u2660': 'cS',
    '\u2661': 'cH',
    '\u2662': 'cD',
    '\u2663': 'cC',
    '\u2664': 'cS-',
    '\u2665': 'cH-',
    '\u2666': 'cD-',
    '\u2667': 'cC-',
    '\u2669': 'Md',
    '\u266A': 'M8',
    '\u266B': 'M2',
    '\u266C': 'M16',
    '\u266D': 'Mb',
    '\u266E': 'Mx',
    '\u266F': 'MX',
    '\u2713': 'OK',
    '\u2717': 'XX',
    '\u2720': '-X',
    '\u3000': 'IS',
    '\u3001': ',_',
    '\u3002': '._',
    '\u3003': '+"',
    '\u3004': '+_',
    '\u3005': '*_',
    '\u3006': ';_',
    '\u3007': '0_',
    '\u300A': '<+',
    '\u300B': '>+',
    '\u300C': "<'",
    '\u300D': ">'",
    '\u300E': '<"',
    '\u300F': '>"',
    '\u3010': '("',
    '\u3011': ')"',
    '\u3012': '=T',
    '\u3013': '=_',
    '\u3014': "('",
    '\u3015': ")'",
    '\u3016': '(I',
    '\u3017': ')I',
    '\u301C': '-?',
    '\u3020': '=T:)',
    '\u3041': 'A5',
    '\u3042': 'a5',
    '\u3043': 'I5',
    '\u3044': 'i5',
    '\u3045': 'U5',
    '\u3046': 'u5',
    '\u3047': 'E5',
    '\u3048': 'e5',
    '\u3049': 'O5',
    '\u304A': 'o5',
    '\u304B': 'ka',
    '\u304C': 'ga',
    '\u304D': 'ki',
    '\u304E': 'gi',
    '\u304F': 'ku',
    '\u3050': 'gu',
    '\u3051': 'ke',
    '\u3052': 'ge',
    '\u3053': 'ko',
    '\u3054': 'go',
    '\u3055': 'sa',
    '\u3056': 'za',
    '\u3057': 'si',
    '\u3058': 'zi',
    '\u3059': 'su',
    '\u305A': 'zu',
    '\u305B': 'se',
    '\u305C': 'ze',
    '\u305D': 'so',
    '\u305E': 'zo',
    '\u305F': 'ta',
    '\u3060': 'da',
    '\u3061': 'ti',
    '\u3062': 'di',
    '\u3063': 'tU',
    '\u3064': 'tu',
    '\u3065': 'du',
    '\u3066': 'te',
    '\u3067': 'de',
    '\u3068': 'to',
    '\u3069': 'do',
    '\u306A': 'na',
    '\u306B': 'ni',
    '\u306C': 'nu',
    '\u306D': 'ne',
    '\u306E': 'no',
    '\u306F': 'ha',
    '\u3070': 'ba',
    '\u3071': 'pa',
    '\u3072': 'hi',
    '\u3073': 'bi',
    '\u3074': 'pi',
    '\u3075': 'hu',
    '\u3076': 'bu',
    '\u3077': 'pu',
    '\u3078': 'he',
    '\u3079': 'be',
    '\u307A': 'pe',
    '\u307B': 'ho',
    '\u307C': 'bo',
    '\u307D': 'po',
    '\u307E': 'ma',
    '\u307F': 'mi',
    '\u3080': 'mu',
    '\u3081': 'me',
    '\u3082': 'mo',
    '\u3083': 'yA',
    '\u3084': 'ya',
    '\u3085': 'yU',
    '\u3086': 'yu',
    '\u3087': 'yO',
    '\u3088': 'yo',
    '\u3089': 'ra',
    '\u308A': 'ri',
    '\u308B': 'ru',
    '\u308C': 're',
    '\u308D': 'ro',
    '\u308E': 'wA',
    '\u308F': 'wa',
    '\u3090': 'wi',
    '\u3091': 'we',
    '\u3092': 'wo',
    '\u3093': 'n5',
    '\u3094': 'vu',
    '\u309B': '"5',
    '\u309C': '05',
    '\u309D': '*5',
    '\u309E': '+5',
    '\u30A1': 'a6',
    '\u30A2': 'A6',
    '\u30A3': 'i6',
    '\u30A4': 'I6',
    '\u30A5': 'u6',
    '\u30A6': 'U6',
    '\u30A7': 'e6',
    '\u30A8': 'E6',
    '\u30A9': 'o6',
    '\u30AA': 'O6',
    '\u30AB': 'Ka',
    '\u30AC': 'Ga',
    '\u30AD': 'Ki',
    '\u30AE': 'Gi',
    '\u30AF': 'Ku',
    '\u30B0': 'Gu',
    '\u30B1': 'Ke',
    '\u30B2': 'Ge',
    '\u30B3': 'Ko',
    '\u30B4': 'Go',
    '\u30B5': 'Sa',
    '\u30B6': 'Za',
    '\u30B7': 'Si',
    '\u30B8': 'Zi',
    '\u30B9': 'Su',
    '\u30BA': 'Zu',
    '\u30BB': 'Se',
    '\u30BC': 'Ze',
    '\u30BD': 'So',
    '\u30BE': 'Zo',
    '\u30BF': 'Ta',
    '\u30C0': 'Da',
    '\u30C1': 'Ti',
    '\u30C2': 'Di',
    '\u30C3': 'TU',
    '\u30C4': 'Tu',
    '\u30C5': 'Du',
    '\u30C6': 'Te',
    '\u30C7': 'De',
    '\u30C8': 'To',
    '\u30C9': 'Do',
    '\u30CA': 'Na',
    '\u30CB': 'Ni',
    '\u30CC': 'Nu',
    '\u30CD': 'Ne',
    '\u30CE': 'No',
    '\u30CF': 'Ha',
    '\u30D0': 'Ba',
    '\u30D1': 'Pa',
    '\u30D2': 'Hi',
    '\u30D3': 'Bi',
    '\u30D4': 'Pi',
    '\u30D5': 'Hu',
    '\u30D6': 'Bu',
    '\u30D7': 'Pu',
    '\u30D8': 'He',
    '\u30D9': 'Be',
    '\u30DA': 'Pe',
    '\u30DB': 'Ho',
    '\u30DC': 'Bo',
    '\u30DD': 'Po',
    '\u30DE': 'Ma',
    '\u30DF': 'Mi',
    '\u30E0': 'Mu',
    '\u30E1': 'Me',
    '\u30E2': 'Mo',
    '\u30E3': 'YA',
    '\u30E4': 'Ya',
    '\u30E5': 'YU',
    '\u30E6': 'Yu',
    '\u30E7': 'YO',
    '\u30E8': 'Yo',
    '\u30E9': 'Ra',
    '\u30EA': 'Ri',
    '\u30EB': 'Ru',
    '\u30EC': 'Re',
    '\u30ED': 'Ro',
    '\u30EE': 'WA',
    '\u30EF': 'Wa',
    '\u30F0': 'Wi',
    '\u30F1': 'We',
    '\u30F2': 'Wo',
    '\u30F3': 'N6',
    '\u30F4': 'Vu',
    '\u30F5': 'KA',
    '\u30F6': 'KE',
    '\u30F7': 'Va',
    '\u30F8': 'Vi',
    '\u30F9': 'Ve',
    '\u30FA': 'Vo',
    '\u30FB': '.6',
    '\u30FC': '-6',
    '\u30FD': '*6',
    '\u30FE': '+6',
    '\u3105': 'b4',
    '\u3106': 'p4',
    '\u3107': 'm4',
    '\u3108': 'f4',
    '\u3109': 'd4',
    '\u310A': 't4',
    '\u310B': 'n4',
    '\u310C': 'l4',
    '\u310D': 'g4',
    '\u310E': 'k4',
    '\u310F': 'h4',
    '\u3110': 'j4',
    '\u3111': 'q4',
    '\u3112': 'x4',
    '\u3113': 'zh',
    '\u3114': 'ch',
    '\u3115': 'sh',
    '\u3116': 'r4',
    '\u3117': 'z4',
    '\u3118': 'c4',
    '\u3119': 's4',
    '\u311A': 'a4',
    '\u311B': 'o4',
    '\u311C': 'e4',
    '\u311D': 'eh4',
    '\u311E': 'ai',
    '\u311F': 'ei',
    '\u3120': 'au',
    '\u3121': 'ou',
    '\u3122': 'an',
    '\u3123': 'en',
    '\u3124': 'aN',
    '\u3125': 'eN',
    '\u3126': 'er',
    '\u3127': 'i4',
    '\u3128': 'u4',
    '\u3129': 'iu',
    '\u312A': 'v4',
    '\u312B': 'nG',
    '\u312C': 'gn',
    '\u321C': '(JU)',
    '\u3220': '1c',
    '\u3221': '2c',
    '\u3222': '3c',
    '\u3223': '4c',
    '\u3224': '5c',
    '\u3225': '6c',
    '\u3226': '7c',
    '\u3227': '8c',
    '\u3228': '9c',
    '\u3229': '10c',
    '\u327F': 'KSC',
    '\uFB00': 'ff',
    '\uFB01': 'fi',
    '\uFB02': 'fl',
    '\uFB03': 'ffi',
    '\uFB04': 'ffl',
    '\uFB05': 'ft',
    '\uFB06': 'st',
    '\uFE7D': '3+;',
    '\uFE82': 'aM.',
    '\uFE84': 'aH.',
    '\uFE8D': 'a+-',
    '\uFE8E': 'a+.',
    '\uFE8F': 'b+-',
    '\uFE90': 'b+,',
    '\uFE91': 'b+;',
    '\uFE92': 'b+.',
    '\uFE93': 'tm-',
    '\uFE94': 'tm.',
    '\uFE95': 't+-',
    '\uFE96': 't+,',
    '\uFE97': 't+;',
    '\uFE98': 't+.',
    '\uFE99': 'tk-',
    '\uFE9A': 'tk,',
    '\uFE9B': 'tk;',
    '\uFE9C': 'tk.',
    '\uFE9D': 'g+-',
    '\uFE9E': 'g+,',
    '\uFE9F': 'g+;',
    '\uFEA0': 'g+.',
    '\uFEA1': 'hk-',
    '\uFEA2': 'hk,',
    '\uFEA3': 'hk;',
    '\uFEA4': 'hk.',
    '\uFEA5': 'x+-',
    '\uFEA6': 'x+,',
    '\uFEA7': 'x+;',
    '\uFEA8': 'x+.',
    '\uFEA9': 'd+-',
    '\uFEAA': 'd+.',
    '\uFEAB': 'dk-',
    '\uFEAC': 'dk.',
    '\uFEAD': 'r+-',
    '\uFEAE': 'r+.',
    '\uFEAF': 'z+-',
    '\uFEB0': 'z+.',
    '\uFEB1': 's+-',
    '\uFEB2': 's+,',
    '\uFEB3': 's+;',
    '\uFEB4': 's+.',
    '\uFEB5': 'sn-',
    '\uFEB6': 'sn,',
    '\uFEB7': 'sn;',
    '\uFEB8': 'sn.',
    '\uFEB9': 'c+-',
    '\uFEBA': 'c+,',
    '\uFEBB': 'c+;',
    '\uFEBC': 'c+.',
    '\uFEBD': 'dd-',
    '\uFEBE': 'dd,',
    '\uFEBF': 'dd;',
    '\uFEC0': 'dd.',
    '\uFEC1': 'tj-',
    '\uFEC2': 'tj,',
    '\uFEC3': 'tj;',
    '\uFEC4': 'tj.',
    '\uFEC5': 'zH-',
    '\uFEC6': 'zH,',
    '\uFEC7': 'zH;',
    '\uFEC8': 'zH.',
    '\uFEC9': 'e+-',
    '\uFECA': 'e+,',
    '\uFECB': 'e+;',
    '\uFECC': 'e+.',
    '\uFECD': 'i+-',
    '\uFECE': 'i+,',
    '\uFECF': 'i+;',
    '\uFED0': 'i+.',
    '\uFED1': 'f+-',
    '\uFED2': 'f+,',
    '\uFED3': 'f+;',
    '\uFED4': 'f+.',
    '\uFED5': 'q+-',
    '\uFED6': 'q+,',
    '\uFED7': 'q+;',
    '\uFED8': 'q+.',
    '\uFED9': 'k+-',
    '\uFEDA': 'k+,',
    '\uFEDB': 'k+;',
    '\uFEDC': 'k+.',
    '\uFEDD': 'l+-',
    '\uFEDE': 'l+,',
    '\uFEDF': 'l+;',
    '\uFEE0': 'l+.',
    '\uFEE1': 'm+-',
    '\uFEE2': 'm+,',
    '\uFEE3': 'm+;',
    '\uFEE4': 'm+.',
    '\uFEE5': 'n+-',
    '\uFEE6': 'n+,',
    '\uFEE7': 'n+;',
    '\uFEE8': 'n+.',
    '\uFEE9': 'h+-',
    '\uFEEA': 'h+,',
    '\uFEEB': 'h+;',
    '\uFEEC': 'h+.',
    '\uFEED': 'w+-',
    '\uFEEE': 'w+.',
    '\uFEEF': 'j+-',
    '\uFEF0': 'j+.',
    '\uFEF1': 'y+-',
    '\uFEF2': 'y+,',
    '\uFEF3': 'y+;',
    '\uFEF4': 'y+.',
    '\uFEF5': 'lM-',
    '\uFEF6': 'lM.',
    '\uFEF7': 'lH-',
    '\uFEF8': 'lH.',
    '\uFEF9': 'lh-',
    '\uFEFA': 'lh.',
    '\uFEFB': 'la-',
    '\uFEFC': 'la.',
}.get

_x11_keys = dict(
    exclam='!',
    quotedbl='"',
    numbersign='#',
    percent='%',
    apostrophe="'",
    parenright=')',
    parenleft='(',
    asterisk='*',
    plus='+',
    comma=',',
    minus='-',
    period='.',
    slash='/',
    colon=':',
    semicolon=';',
    equal='=',
    question='?',
    bracketleft='[',
    backslash='\\',
    bracketright=']',
    asciicircum='^',
    underscore='_',
    grave='`',
    braceleft='{',
    bar='|',
    braceright='}',
    asciitilde='~',
)

cache = functools.lru_cache(maxsize=1)

@cache
def _get_x11_seq_data():
    data = collections.defaultdict(list)
    path = '/usr/share/X11/locale/en_US.UTF-8/Compose'
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            if line[:1] in {'#', '\n'}:
                continue
            match = re.match(r'(\S.*):\s*"(.*)"', line)
            if match is None:
                raise RuntimeError(f'{path}: cannot parse line {line!r}')
            (seq, ch) = match.groups()
            if len(ch) != 1:
                continue
            seq = seq.rstrip()
            def subst(match):
                orig = match.group()
                key = match.group(1)
                if len(key) == 1:
                    return key
                try:
                    return _x11_keys[key]
                except KeyError:
                    return orig
            seq = re.sub(r'<(\w+)>', subst, seq)
            data[ch] += [seq]
    return data

def get_x11_seqs(ch):
    return _get_x11_seq_data().get(ch)

@cache
def _get_html5_entities():
    data = collections.defaultdict(set)
    for ent, ch in html.entities.html5.items():
        if ent[-1:] != ';':
            ent += ';'
        data[ch].add(ent)
    return data

def get_html5_entities(ch):
    data = _get_html5_entities()
    return data.get(ch)

class Alias(typing.NamedTuple):
    name: str
    label: str

_alias_path = '/usr/share/unicode/NameAliases.txt'
# TODO: make it optional?

@cache
def _get_alias_data():
    data = collections.defaultdict(list)
    path = _alias_path
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            line = line.rstrip('\n')
            if line[:1] in {'#', ''}:
                continue
            (pt, name, label) = line.split(';')
            ch = chr(int(pt, 16))
            data[ch] += [Alias(name, label)]
    return data

def get_aliases(ch):
    return _get_alias_data().get(ch)

def get_aliases_version():
    path = _alias_path
    match = None
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            match = re.match('^# NameAliases-([0-9.]+)[.]txt$', line)
            break
    if match:
        return match.group(1)
    return None

_libunl = ctypes.CDLL('libuninameslist.so.1')
# TODO: make it optional?

# const char *uniNamesList_NamesListVersion(void);
_libunl_version = _libunl.uniNamesList_NamesListVersion
_libunl_version.argtypes = []
_libunl_version.restype = ctypes.c_char_p

def get_unl_version():
    v = _libunl_version()
    v = v.decode('ASCII')
    v = re.sub(r'\ANameslist-Version: ', '', v)
    return v

# const char *uniNamesList_annot(unsigned long uni);
_libunl_annot = _libunl.uniNamesList_annot
_libunl_annot.argtypes = [ctypes.c_ulong]
_libunl_annot.restype = ctypes.c_char_p

class Annot(typing.NamedTuple):
    see_also: list
    comments: list
    variations: list

def get_annot(ch):
    pt = ord(ch)
    s = _libunl_annot(pt)
    if s is None:
        return Annot([], [], {})
    s = s.decode('UTF-8')
    codes = 'x*:#%=~'
    lists = {}
    variations = {}
    for code in codes:
        lists[code] = []
    for line in s.splitlines():
        match = re.match(fr'\t([{re.escape(codes)}]) (\S.*)', line)
        if match is None:
            if line.startswith('\t\t'):
                # FIXME?
                continue
            warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
            continue
        (code, s) = match.groups()
        if code == 'x':
            match = re.fullmatch(r'(?:[(].* - ([0-9A-F]{4,})[)]|([0-9A-F]{4,}))', s)
            if match is None:
                warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
                continue
            xpt = int(match.group(1) or match.group(2), 16)
            s = chr(xpt)
        elif code == '~':
            match = re.fullmatch(fr'{pt:04X} (FE0[0-D]) (\S.*)', s)
            if match is None:
                warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
                continue
            xpt = int(match.group(1), 16)
            label = match.group(2)
            variations[chr(xpt)] = label
        lst = lists[code]
        lst += [s]
    return Annot(
        see_also=lists['x'],
        comments=lists['*'],
        variations=variations,
    )

# int uniNamesList_blockNumber(unsigned long uni);
_libunl_block_no = _libunl.uniNamesList_blockNumber
_libunl_block_no.argtypes = [ctypes.c_ulong]
_libunl_block_no.restype = ctypes.c_int

# long uniNamesList_blockStart(int uniBlock);
_libunl_block_start = _libunl.uniNamesList_blockStart
_libunl_block_start.argtypes = [ctypes.c_int]
_libunl_block_start.restype = ctypes.c_long

# long uniNamesList_blockEnd(int uniBlock);
_libunl_block_end = _libunl.uniNamesList_blockEnd
_libunl_block_end.argtypes = [ctypes.c_int]
_libunl_block_end.restype = ctypes.c_long

# const char *uniNamesList_blockName(int uniBlock);
_libunl_block_name = _libunl.uniNamesList_blockName
_libunl_block_name.argtypes = [ctypes.c_int]
_libunl_block_name.restype = ctypes.c_char_p

class Block(typing.NamedTuple):
    start: int
    stop: int
    name: str

def get_block(ch):
    pt = ord(ch)
    i = _libunl_block_no(pt)
    if i < 0:
        return None
    start = _libunl_block_start(i)
    stop = _libunl_block_end(i)
    name = _libunl_block_name(i).decode('UTF-8')
    return Block(start, stop, name)

class PropertyValue(typing.NamedTuple):
    short: str
    long: str

    def __str__(self):
        return f'{self.short} ({self.long})'

def vcmp(v1, v2):
    '''
    cmp()-style version comparison
    '''
    v1 = v1.split('.')
    v2 = v2.split('.')
    for c1, c2 in itertools.zip_longest(v1, v2, fillvalue=0):
        c1 = int(c1)
        c2 = int(c2)
        if c1 > c2:
            return 1
        if c1 < c2:
            return -1
    return 0

def get_script(ch):
    if icu is None:
        return None
    if vcmp(icu.VERSION, '2.4.3') < 0:
        return None
    i = icu.Char.getIntPropertyValue(ch, icu.UProperty.SCRIPT)
    names = (
        icu.Char.getPropertyValueName(icu.UProperty.SCRIPT, i, choice)
        for choice in (
            icu.UPropertyNameChoice.SHORT_PROPERTY_NAME,
            icu.UPropertyNameChoice.LONG_PROPERTY_NAME,
        )
    )
    return PropertyValue(*names)

_age_to_date = {
    # source: https://www.unicode.org/versions/enumeratedversions.html
    '1.1': 1993,
    '2.0': 1996,
    '2.1': 1998,
    '3.0': 1999,  # FIXME?
    # https://www.unicode.org/versions/Unicode16.0.0/core-spec/appendix-d/
    # says 3.0 was released in 2000
    '3.1': 2001,
    '3.2': 2002,
    '4.0': 2003,
    '4.1': 2005,
    '5.0': 2006,
    '5.1': 2008,
    '5.2': 2009,
    '6.0': 2010,
    '6.1': 2012,
    '6.2': 2012,
    '6.3': 2013,
    '7.0': 2014,
    '8.0': 2015,
    '9.0': 2016,
    '10.0': 2017,
    '11.0': 2018,
    '12.0': 2019,
    '12.1': 2019,
    '13.0': 2020,
    '14.0': 2021,
    '15.0': 2022,
    '15.1': 2023,
    '16.0': 2024,
    '17.0': 2025,
}

def get_age(ch):
    if icu is None:
        return None
    # TODO: cover Unicode 1.0 too
    age = icu.Char.charAge(ch)
    if age == '0.0':
        return None
    date = _age_to_date.get(age)
    if date is not None:
        age = f'{age} ({date})'
    return age

@cache
def _get_prop_alias_data():
    data = collections.defaultdict(dict)
    path = '/usr/share/unicode/PropertyValueAliases.txt'
    # TODO: make it optional?
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            line = line.partition('#')[0]
            line = line.rstrip()
            if not line:
                continue
            line = line.split(';')
            (prop, k1, k2, *tail) = map(str.strip, line)
            del tail
            assert k1 not in data[prop], f'{prop}={k1} already seen'
            data[prop][k1] = k2
    return data

def get_category_alias(cat):
    return _get_prop_alias_data()['gc'][cat]

def float2frac(x):
    (n, d) = x.as_integer_ratio()
    (p0, q0, p1, q1) = (0, 1, 1, 0)
    while d != 0:
        a = n // d
        (p0, q0, p1, q1) = (p1, q1, p0 + a * p1, q0 + a * q1)
        (n, d) = (d, n - a * d)
        if p1 / q1 == x:
            return fractions.Fraction(p1, q1)
    raise ValueError

def get_numeric_value(ch):
    # Eww, FIXME in Python?
    try:
        nv = udata.numeric(ch)
    except ValueError:
        return None
    return float2frac(nv)

def format_name(ch):
    pt = ord(ch)
    name = udata.name(ch, '')
    cat = udata.category(ch)
    if not name:
        # use code point label as fallback
        # https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G135248
        # (Â§4.8.2 Code Point Labels)
        label_prefix = dict(
            Cc='control',
            Cn='reserved',
            Co='private-use',
            Cs='surrogate',
        ).get(cat)
        if pt & 0xFFFF >= 0xFFFE or 0xFDD0 <= pt < 0xFDF0:
            assert label_prefix == 'reserved'
            label_prefix = 'noncharacter'
        if label_prefix:
            name = f'<{label_prefix}-{pt:04X}>'
    return f'U+{pt:04X}{name and " "}{name or ""}'

def is_double_combining(ch):
    if not icu:
        return False
    if vcmp(icu.VERSION, '2.4.3') < 0:
        return None
    i = icu.Char.getIntPropertyValue(ch, icu.UProperty.CANONICAL_COMBINING_CLASS)
    comb_class = icu.Char.getPropertyValueName(
        icu.UProperty.CANONICAL_COMBINING_CLASS,
        i,
        icu.UPropertyNameChoice.SHORT_PROPERTY_NAME
    )
    return comb_class in {'DA', 'DB'}

def format_glyph(ch):
    cat = udata.category(ch)
    if cat[0] == 'C':
        return None
    if cat in {'Me', 'Mn'}:
        if ch in '\u180B\u180C\u180D\u180F':
            # MONGOLIAN FREE VARIATION SELECTOR {ONE,TWO,THREE,FOUR}
            return None
        if '\uFE00' <= ch <= '\uFE0F':
            # VARIATION SELECTOR-{1,â¦,16}
            return None
        if '\U000E0100' <= ch <= '\U000E01EF':
            # VARIATION SELECTOR-{17,â¦,256}
            return None
        o = '\N{DOTTED CIRCLE}'
        if is_double_combining(ch):
            return f'{o}{ch}{o}'
        else:
            return f'{o}{ch}'
    if cat == 'Zs':
        return f'[{ch}]'
    if cat in {'Zl', 'Zp'}:
        return None
    return ch

class C:

    escape = {}
    unescape = {}
    for e in 'abfnrtv':
        c = ast.literal_eval(f'"\\{e}"')
        unescape[f'\\{e}'] = c
        escape[c] = f'\\{e}'
    e = None  # hi, Pylint!
    del e, c

def filter_char_names(flt):
    for pt in range(0xF0000):
        ch = chr(pt)
        name = udata.name(ch, None)
        if not name:
            continue
        if flt(name):
            yield ch
    # FIXME: We should take aliases and named sequences into account.

def main():
    ap = argparse.ArgumentParser(description=__doc__)
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'  # pylint: disable=protected-access
    ap.add_argument('--version', action=VersionAction)
    ag = ap.add_mutually_exclusive_group()
    ag.add_argument('-r', '--regexp', action='store_true', help='show info about characters matching regexp')
    ag.add_argument('-s', '--string', action='store_true', help='show info about characters in the string')
    ap.add_argument('-p', '--print', action='store_true', help='print only characters')
    ap.add_argument('name', metavar='NAME')
    ap.add_argument('tail', metavar='...', nargs=argparse.REMAINDER, help=argparse.SUPPRESS)
    options = ap.parse_args()
    if options.print:
        show = print_chars
    else:
        show = show_chars
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    name = str.join(' ', [options.name, *options.tail])
    if options.string:
        show(name)
        return
    if options.regexp:
        try:
            regexp = re.compile(name, flags=re.IGNORECASE)
        except re.error as exc:
            error(f'regexp syntax error: {exc}')
        s = filter_char_names(regexp.search)
        show(s)
        return
    if name in C.unescape:
        s = C.unescape[name]
        show(s)
        return
    match = re.fullmatch(r'[uU][+]([0-9A-Fa-f]+)|&(?:#x([0-9A-Fa-f]+)|#([0-9]+)|([^\s&#;]+));?', name)
    name = name.upper()
    if match:
        (pt_hex1, pt_hex2, pt_dec, ent) = match.groups()
        if ent is not None:
            assert ent[-1] != ';'
            ent += ';'
            try:
                s = html.entities.html5[ent]
            except KeyError:
                error(f'no such HTML5 entity: &{ent}')
        else:
            if pt_dec is not None:
                pt = int(pt_dec)
            else:
                pt = int(pt_hex1 or pt_hex2, 16)
            if pt > sys.maxunicode:
                error(f'code point out of range: 0x{pt:04X} > 0x{sys.maxunicode:X}')
            s = chr(pt)
    elif set(name) & set('?*[]'):
        pattern = name
        regexp = fnmatch.translate(pattern)
        regexp = re.compile(regexp)
        s = filter_char_names(regexp.match)
    else:
        try:
            s = udata.lookup(name)
        except KeyError as exc:
            error(exc.args[0])
        if len(s) > 1:
            print(name.upper())
            print('Sequence:')
            for ch in s:
                print(' ', format_name(ch))
            print()
    show(s)

def print_chars(s):
    for ch in s:
        glyph = format_glyph(ch)
        if glyph:
            print(glyph)

def show_chars(s):
    want_sep = False
    for ch in s:
        if want_sep:
            print()
        show_char(ch)
        want_sep = True

def show_char(ch):
    print(format_name(ch))
    aliases = get_aliases(ch)
    if aliases:
        print('Aliases:')
        for alias in aliases:
            print(f'  {alias.name} ({alias.label})')
    glyph = format_glyph(ch)
    if glyph:
        print(f'Text: {glyph}')
    mnemonic = get_mnemonic(ch)
    if mnemonic:
        print(f'RFC-1345: {mnemonic}')
    x11_seqs = get_x11_seqs(ch)
    if x11_seqs:
        print('X11 multi-key input sequences:')
        for x11_seq in x11_seqs:
            print(' ', x11_seq)
    if ch in C.escape:
        print('C escape:', C.escape[ch])
    ents = get_html5_entities(ch)
    if ents:
        print(
            'HTML5:',
            *(f'&{e}' for e in sorted(ents))
        )
    cat = udata.category(ch)
    long_cat = get_category_alias(cat)
    print(f'Category: {cat} ({long_cat})')
    block = get_block(ch)
    if block:
        print(f'Block: U+{block.start:04X}..U+{block.stop:04X} {block.name}')
    script = get_script(ch)
    if script and script.short != 'Zzzz':
        print(f'Script: {script}')
    nv = get_numeric_value(ch)
    if nv is not None:
        print(f'Numeric value: {nv}')
    annots = get_annot(ch)
    if annots.variations:
        print('Variations:')
        for vch, vlabel in sorted(annots.variations.items()):
            print(' ', format_name(vch), vlabel)
    if annots.see_also:
        print('See also:')
        for xch in annots.see_also:
            print(' ', format_name(xch))
    if annots.comments:
        print('Comments:')
        for s in annots.comments:
            print(' ', s)
    age = get_age(ch)
    if age and not age.startswith('1.'):
        print('Added: Unicode', age)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
